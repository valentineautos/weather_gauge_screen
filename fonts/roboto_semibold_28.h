/*******************************************************************************
 * Size: 28 px
 * Bpp: 1
 * Opts: --bpp 1 --size 28 --no-compress --font RobotoMono-SemiBold.ttf --symbols APMC°%qwertyuioplkjhgfdsazxcvbnm,./0321654987!&£@-_ --format lvgl -o roboto_semibold_28.c
 ******************************************************************************/

#ifndef ROBOTO_SEMIBOLD_28
#define ROBOTO_SEMIBOLD_28 1
#endif

#if ROBOTO_SEMIBOLD_28

/*-----------------
 *    BITMAPS
 *----------------*/

/*Store the image of the glyphs*/
static LV_ATTRIBUTE_LARGE_CONST const uint8_t glyph_bitmap_r_s_28[] = {
    /* U+0021 "!" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0,
    0x6f, 0xf6,

    /* U+0025 "%" */
    0x38, 0x0, 0x7c, 0x0, 0xc6, 0x0, 0xc6, 0x38,
    0xc6, 0x30, 0xc6, 0x70, 0x7c, 0xe0, 0x3c, 0xe0,
    0x1, 0xc0, 0x1, 0x80, 0x3, 0x80, 0x3, 0x3c,
    0x7, 0x7e, 0xe, 0xe7, 0xc, 0xc3, 0x1c, 0xc3,
    0x8, 0xc3, 0x0, 0xe3, 0x0, 0x7e, 0x0, 0x3c,

    /* U+0026 "&" */
    0x7, 0xc0, 0x1f, 0xe0, 0x1f, 0xf0, 0x3c, 0xf0,
    0x38, 0x70, 0x38, 0x70, 0x38, 0xf0, 0x3d, 0xe0,
    0x1f, 0xc0, 0xf, 0x80, 0x1f, 0x0, 0x3f, 0x8e,
    0x7b, 0xce, 0xf1, 0xee, 0xf0, 0xfc, 0xf0, 0x7c,
    0xf8, 0x78, 0x7f, 0xfc, 0x3f, 0xfc, 0x1f, 0x8e,

    /* U+002C "," */
    0x7b, 0xde, 0xf7, 0xbb, 0xdc, 0x0,

    /* U+002D "-" */
    0xff, 0xff, 0xff, 0xff, 0x80,

    /* U+002E "." */
    0x77, 0xfe, 0xe0,

    /* U+002F "/" */
    0x0, 0xe0, 0x38, 0x7, 0x1, 0xe0, 0x38, 0x7,
    0x1, 0xe0, 0x38, 0x7, 0x1, 0xe0, 0x38, 0x7,
    0x1, 0xe0, 0x38, 0x7, 0x1, 0xe0, 0x38, 0x7,
    0x1, 0xc0, 0x38, 0xf, 0x1, 0xc0, 0x0,

    /* U+0030 "0" */
    0xf, 0x81, 0xff, 0x1f, 0xfc, 0xf1, 0xef, 0x7,
    0xf8, 0x3f, 0xc1, 0xfe, 0x1f, 0xf1, 0xff, 0x9f,
    0xff, 0x9f, 0xf8, 0xff, 0x87, 0xf8, 0x3f, 0xc1,
    0xfe, 0xf, 0x78, 0xf3, 0xff, 0x8f, 0xf8, 0x1f,
    0x0,

    /* U+0031 "1" */
    0x0, 0x83, 0xcf, 0xff, 0xff, 0xfe, 0x3c, 0x1e,
    0xf, 0x7, 0x83, 0xc1, 0xe0, 0xf0, 0x78, 0x3c,
    0x1e, 0xf, 0x7, 0x83, 0xc1, 0xe0, 0xf0,

    /* U+0032 "2" */
    0xf, 0xc0, 0xff, 0x87, 0xff, 0x1e, 0x3e, 0xf0,
    0x7b, 0xc1, 0xe0, 0x7, 0x80, 0x1e, 0x0, 0xf0,
    0x7, 0xc0, 0x1e, 0x0, 0xf0, 0x7, 0x80, 0x3c,
    0x1, 0xe0, 0x7, 0x0, 0x3c, 0x1, 0xff, 0xf7,
    0xff, 0xdf, 0xff,

    /* U+0033 "3" */
    0xf, 0xc0, 0xff, 0x87, 0xff, 0x3e, 0x3e, 0xf0,
    0x78, 0x1, 0xe0, 0x7, 0x80, 0x3c, 0x7, 0xf0,
    0x1f, 0x0, 0x7f, 0x0, 0x1e, 0x0, 0x3c, 0x0,
    0xff, 0x3, 0xfc, 0xf, 0xf8, 0x79, 0xff, 0xe3,
    0xff, 0x3, 0xf0,

    /* U+0034 "4" */
    0x0, 0xf0, 0x7, 0xc0, 0x3f, 0x0, 0xfc, 0x7,
    0xf0, 0x1f, 0xc0, 0xef, 0x3, 0xbc, 0x1c, 0xf0,
    0xe3, 0xc3, 0x8f, 0x1c, 0x3c, 0x70, 0xf3, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x0, 0xf0, 0x3, 0xc0,
    0xf, 0x0, 0x3c,

    /* U+0035 "5" */
    0x3f, 0xf8, 0xff, 0xe3, 0xff, 0x8e, 0x0, 0x38,
    0x0, 0xe0, 0x7, 0x80, 0x1f, 0xf0, 0x7f, 0xf1,
    0xff, 0xe3, 0x87, 0x80, 0xf, 0x0, 0x3c, 0x0,
    0xff, 0x3, 0xdc, 0xf, 0x78, 0x78, 0xff, 0xe1,
    0xff, 0x3, 0xf0,

    /* U+0036 "6" */
    0x1, 0xe0, 0x3f, 0x81, 0xfe, 0xf, 0x80, 0x7c,
    0x1, 0xe0, 0x7, 0x3e, 0x3d, 0xfc, 0xff, 0xfb,
    0xe1, 0xef, 0x7, 0xfc, 0xf, 0xf0, 0x3f, 0xc0,
    0xff, 0x3, 0xde, 0x1f, 0x7c, 0x78, 0xff, 0xe1,
    0xff, 0x3, 0xf0,

    /* U+0037 "7" */
    0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xe, 0x0,
    0x38, 0x1, 0xc0, 0x7, 0x0, 0x3c, 0x0, 0xe0,
    0x7, 0x80, 0x1c, 0x0, 0xf0, 0x3, 0x80, 0x1e,
    0x0, 0x78, 0x3, 0xc0, 0xf, 0x0, 0x78, 0x1,
    0xe0, 0x7, 0x0,

    /* U+0038 "8" */
    0x1f, 0xc1, 0xff, 0x1f, 0xfd, 0xf1, 0xff, 0x7,
    0xf8, 0x3f, 0xc1, 0xef, 0x1e, 0x3f, 0xe0, 0xfe,
    0xf, 0xf8, 0xf1, 0xef, 0x7, 0xf8, 0x3f, 0xc1,
    0xfe, 0xf, 0xf8, 0xfb, 0xff, 0x8f, 0xf8, 0x1f,
    0x0,

    /* U+0039 "9" */
    0xf, 0x81, 0xff, 0x1f, 0xf8, 0xf1, 0xef, 0x8f,
    0x78, 0x3f, 0xc1, 0xfe, 0xf, 0xf0, 0x7f, 0x83,
    0xde, 0x3e, 0xff, 0xf3, 0xff, 0x8f, 0xb8, 0x3,
    0xc0, 0x1e, 0x3, 0xe0, 0xfe, 0x7, 0xe0, 0x3c,
    0x0,

    /* U+0040 "@" */
    0x3, 0xe0, 0x1f, 0xe0, 0x70, 0xe1, 0x80, 0x67,
    0x1c, 0xcc, 0xfc, 0xd9, 0x99, 0xe7, 0x33, 0xcc,
    0x67, 0x98, 0xcf, 0x31, 0x9e, 0x63, 0x3c, 0xc6,
    0x79, 0x9d, 0xbb, 0xff, 0x33, 0x9c, 0x70, 0x0,
    0x70, 0x40, 0x7f, 0x80, 0x7e, 0x0,

    /* U+0041 "A" */
    0x3, 0x80, 0x3, 0xc0, 0x7, 0xc0, 0x7, 0xc0,
    0x7, 0xe0, 0xf, 0xe0, 0xe, 0xe0, 0xe, 0xf0,
    0x1e, 0x70, 0x1c, 0x70, 0x1c, 0x78, 0x3c, 0x78,
    0x3c, 0x38, 0x3f, 0xfc, 0x7f, 0xfc, 0x7f, 0xfc,
    0x70, 0x1e, 0xf0, 0x1e, 0xf0, 0x1e, 0xe0, 0xe,

    /* U+0043 "C" */
    0x7, 0xe0, 0x3f, 0xe0, 0xff, 0xe3, 0xe1, 0xe7,
    0x81, 0xde, 0x3, 0xfc, 0x7, 0xf8, 0x0, 0xf0,
    0x1, 0xe0, 0x3, 0xc0, 0x7, 0x80, 0xf, 0x0,
    0x1e, 0x0, 0x3c, 0x7, 0xbc, 0xe, 0x7c, 0x3c,
    0x7f, 0xf0, 0x7f, 0xc0, 0x3f, 0x0,

    /* U+004D "M" */
    0xf0, 0x7f, 0xc7, 0xfe, 0x3f, 0xf1, 0xff, 0x9f,
    0xfe, 0xff, 0xf6, 0xfd, 0xb7, 0xef, 0xbf, 0x79,
    0xf9, 0xcf, 0xce, 0x7e, 0x73, 0xf3, 0x1f, 0x80,
    0xfc, 0x7, 0xe0, 0x3f, 0x1, 0xf8, 0xf, 0xc0,
    0x70,

    /* U+0050 "P" */
    0xff, 0xc3, 0xff, 0xcf, 0xff, 0xbc, 0x1e, 0xf0,
    0x7f, 0xc0, 0xff, 0x3, 0xfc, 0xf, 0xf0, 0x3f,
    0xc1, 0xef, 0xff, 0xbf, 0xfc, 0xff, 0xc3, 0xc0,
    0xf, 0x0, 0x3c, 0x0, 0xf0, 0x3, 0xc0, 0xf,
    0x0, 0x3c, 0x0,

    /* U+005F "_" */
    0xff, 0xff, 0xff, 0xff, 0xfe,

    /* U+0061 "a" */
    0xf, 0xc0, 0xff, 0x87, 0xff, 0x1e, 0x3e, 0xf0,
    0x78, 0x1, 0xe1, 0xff, 0x9f, 0xfe, 0x78, 0x7b,
    0xc1, 0xef, 0x7, 0xbe, 0x3e, 0xff, 0xf9, 0xff,
    0xe1, 0xe7, 0x80,

    /* U+0062 "b" */
    0xf0, 0x7, 0x80, 0x3c, 0x1, 0xe0, 0xf, 0x0,
    0x78, 0x3, 0xdf, 0x1f, 0xfc, 0xff, 0xf7, 0xc7,
    0xbc, 0x3f, 0xe0, 0xff, 0x7, 0xf8, 0x3f, 0xc1,
    0xfe, 0xf, 0xf0, 0x7f, 0xc7, 0xbf, 0xfd, 0xff,
    0xcf, 0x7c, 0x0,

    /* U+0063 "c" */
    0xf, 0xc1, 0xff, 0x1f, 0xfc, 0xf1, 0xff, 0x7,
    0xf8, 0x3f, 0xc0, 0x1e, 0x0, 0xf0, 0x7, 0x80,
    0x3c, 0x1e, 0xf1, 0xf7, 0xff, 0x1f, 0xf0, 0x3f,
    0x0,

    /* U+0064 "d" */
    0x0, 0x78, 0x3, 0xc0, 0x1e, 0x0, 0xf0, 0x7,
    0x80, 0x3c, 0x7d, 0xe7, 0xff, 0x7f, 0xfb, 0xc7,
    0xfe, 0x1f, 0xe0, 0xff, 0x7, 0xf8, 0x3f, 0xc1,
    0xfe, 0xf, 0xf8, 0x7b, 0xc7, 0xdf, 0xfe, 0x7f,
    0xf1, 0xf7, 0x80,

    /* U+0065 "e" */
    0xf, 0xc0, 0x7f, 0xc3, 0xff, 0x9e, 0x1e, 0x70,
    0x3f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xc0, 0xf, 0x0, 0x1e, 0xe, 0x3f, 0xf8, 0x7f,
    0xc0, 0x7e, 0x0,

    /* U+0066 "f" */
    0x0, 0xfc, 0xf, 0xf0, 0x7f, 0xc3, 0xe0, 0xf,
    0x0, 0x3c, 0x0, 0xf0, 0x3f, 0xfe, 0xff, 0xfb,
    0xff, 0xe0, 0xf0, 0x3, 0xc0, 0xf, 0x0, 0x3c,
    0x0, 0xf0, 0x3, 0xc0, 0xf, 0x0, 0x3c, 0x0,
    0xf0, 0x3, 0xc0, 0xf, 0x0, 0x3c, 0x0,

    /* U+0067 "g" */
    0x1f, 0x79, 0xff, 0xdf, 0xfe, 0xf1, 0xff, 0x87,
    0xf8, 0x3f, 0xc1, 0xfe, 0xf, 0xf0, 0x7f, 0x83,
    0xfe, 0x1e, 0xf1, 0xf7, 0xff, 0x9f, 0xfc, 0x7d,
    0xe0, 0xf, 0x20, 0x79, 0x87, 0x9f, 0xfc, 0x7f,
    0xc0, 0xf8, 0x0,

    /* U+0068 "h" */
    0xf0, 0x7, 0x80, 0x3c, 0x1, 0xe0, 0xf, 0x0,
    0x78, 0x3, 0xcf, 0x1e, 0xfe, 0xff, 0xf7, 0xc7,
    0xfc, 0x1f, 0xe0, 0xff, 0x7, 0xf8, 0x3f, 0xc1,
    0xfe, 0xf, 0xf0, 0x7f, 0x83, 0xfc, 0x1f, 0xe0,
    0xff, 0x7, 0x80,

    /* U+0069 "i" */
    0x7, 0x0, 0xf0, 0xf, 0x0, 0x40, 0x0, 0x0,
    0x0, 0xff, 0xf, 0xf0, 0xff, 0x0, 0xf0, 0xf,
    0x0, 0xf0, 0xf, 0x0, 0xf0, 0xf, 0x0, 0xf0,
    0xf, 0x0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0,

    /* U+006A "j" */
    0x3, 0x3, 0xc1, 0xe0, 0x60, 0x0, 0x1, 0xfe,
    0xff, 0x7f, 0x83, 0xc1, 0xe0, 0xf0, 0x78, 0x3c,
    0x1e, 0xf, 0x7, 0x83, 0xc1, 0xe0, 0xf0, 0x78,
    0x3c, 0x1e, 0x1f, 0xff, 0x7f, 0x3f, 0x0,

    /* U+006B "k" */
    0xf0, 0x1, 0xe0, 0x3, 0xc0, 0x7, 0x80, 0xf,
    0x0, 0x1e, 0x0, 0x3c, 0x1e, 0x78, 0x78, 0xf1,
    0xf1, 0xe7, 0xc3, 0xdf, 0x7, 0xfc, 0xf, 0xf0,
    0x1f, 0xf0, 0x3f, 0xf0, 0x7d, 0xf0, 0xf1, 0xe1,
    0xe1, 0xe3, 0xc3, 0xe7, 0x83, 0xcf, 0x3, 0xc0,

    /* U+006C "l" */
    0xff, 0xf, 0xf0, 0xff, 0x0, 0xf0, 0xf, 0x0,
    0xf0, 0xf, 0x0, 0xf0, 0xf, 0x0, 0xf0, 0xf,
    0x0, 0xf0, 0xf, 0x0, 0xf0, 0xf, 0x0, 0xf0,
    0xf, 0x0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0,

    /* U+006D "m" */
    0xef, 0x39, 0xff, 0xfb, 0xff, 0xff, 0x1c, 0x7e,
    0x38, 0xfc, 0x71, 0xf8, 0xe3, 0xf1, 0xc7, 0xe3,
    0x8f, 0xc7, 0x1f, 0x8e, 0x3f, 0x1c, 0x7e, 0x38,
    0xfc, 0x71, 0xf8, 0xe3, 0x80,

    /* U+006E "n" */
    0xf3, 0xc7, 0xbf, 0xbf, 0xfd, 0xf1, 0xff, 0x7,
    0xf8, 0x3f, 0xc1, 0xfe, 0xf, 0xf0, 0x7f, 0x83,
    0xfc, 0x1f, 0xe0, 0xff, 0x7, 0xf8, 0x3f, 0xc1,
    0xe0,

    /* U+006F "o" */
    0xf, 0xc0, 0xff, 0xc7, 0xff, 0x9e, 0x1e, 0xf8,
    0x7f, 0xc0, 0xff, 0x3, 0xfc, 0xf, 0xf0, 0x3f,
    0xc0, 0xff, 0x87, 0xde, 0x1e, 0x7f, 0xf8, 0xff,
    0xc0, 0xfc, 0x0,

    /* U+0070 "p" */
    0xf7, 0xc7, 0xff, 0x3f, 0xfd, 0xf1, 0xef, 0xf,
    0xf8, 0x3f, 0xc1, 0xfe, 0xf, 0xf0, 0x7f, 0x83,
    0xfc, 0x3f, 0xf1, 0xef, 0xff, 0x7f, 0xf3, 0xdf,
    0x1e, 0x0, 0xf0, 0x7, 0x80, 0x3c, 0x1, 0xe0,
    0xf, 0x0, 0x0,

    /* U+0071 "q" */
    0x1f, 0x79, 0xff, 0xdf, 0xfe, 0xf1, 0xff, 0x87,
    0xf8, 0x3f, 0xc1, 0xfe, 0xf, 0xf0, 0x7f, 0x83,
    0xfe, 0x1e, 0xf1, 0xf7, 0xff, 0x9f, 0xfc, 0x7d,
    0xe0, 0xf, 0x0, 0x78, 0x3, 0xc0, 0x1e, 0x0,
    0xf0, 0x7, 0x80,

    /* U+0072 "r" */
    0xf3, 0xff, 0x7e, 0xff, 0xef, 0xc0, 0xf8, 0xf,
    0x0, 0xf0, 0xf, 0x0, 0xf0, 0xf, 0x0, 0xf0,
    0xf, 0x0, 0xf0, 0xf, 0x0, 0xf0, 0x0,

    /* U+0073 "s" */
    0xf, 0xc0, 0xff, 0xc3, 0xff, 0x9f, 0x1f, 0x78,
    0x3d, 0xe0, 0x3, 0xf0, 0x7, 0xfc, 0x1, 0xf8,
    0x0, 0xf7, 0x83, 0xde, 0x1f, 0x7f, 0xfc, 0xff,
    0xe0, 0xfe, 0x0,

    /* U+0074 "t" */
    0x1e, 0x0, 0x78, 0x1, 0xe0, 0x7, 0x80, 0xff,
    0xfb, 0xff, 0xef, 0xff, 0x87, 0x80, 0x1e, 0x0,
    0x78, 0x1, 0xe0, 0x7, 0x80, 0x1e, 0x0, 0x78,
    0x1, 0xe0, 0x7, 0xc0, 0xf, 0xf8, 0x3f, 0xf0,
    0x3f, 0x80,

    /* U+0075 "u" */
    0xf0, 0x7f, 0x83, 0xfc, 0x1f, 0xe0, 0xff, 0x7,
    0xf8, 0x3f, 0xc1, 0xfe, 0xf, 0xf0, 0x7f, 0x83,
    0xfc, 0x1f, 0xf1, 0xf7, 0xff, 0xbf, 0xbc, 0x79,
    0xe0,

    /* U+0076 "v" */
    0xf0, 0x1e, 0xe0, 0x39, 0xe0, 0xf3, 0xc1, 0xc3,
    0x83, 0x87, 0x8f, 0x7, 0x1c, 0xe, 0x38, 0x1c,
    0xe0, 0x1d, 0xc0, 0x3b, 0x80, 0x7e, 0x0, 0x7c,
    0x0, 0xf8, 0x0, 0xe0, 0x0,

    /* U+0077 "w" */
    0x71, 0xc7, 0x71, 0xc7, 0x71, 0xc7, 0x73, 0xcf,
    0x73, 0xce, 0x73, 0xee, 0x3b, 0x6e, 0x3b, 0x6e,
    0x3f, 0x6e, 0x3e, 0x6c, 0x3e, 0x7c, 0x1e, 0x3c,
    0x1e, 0x3c, 0x1e, 0x3c, 0x1c, 0x3c,

    /* U+0078 "x" */
    0x78, 0x1e, 0xf0, 0x78, 0xf1, 0xe0, 0xf3, 0xc0,
    0xef, 0x1, 0xfc, 0x1, 0xf0, 0x3, 0xe0, 0x7,
    0xe0, 0x1f, 0xc0, 0x7b, 0xc0, 0xf3, 0xc3, 0xc7,
    0x8f, 0x7, 0x9e, 0x7, 0x80,

    /* U+0079 "y" */
    0xf0, 0x1e, 0xf0, 0x1e, 0x78, 0x1e, 0x78, 0x3c,
    0x38, 0x3c, 0x3c, 0x38, 0x1c, 0x78, 0x1e, 0x70,
    0x1e, 0xf0, 0xe, 0xe0, 0xf, 0xe0, 0x7, 0xe0,
    0x7, 0xc0, 0x3, 0xc0, 0x3, 0x80, 0x7, 0x80,
    0x7, 0x0, 0xf, 0x0, 0x3e, 0x0, 0x3e, 0x0,
    0x78, 0x0,

    /* U+007A "z" */
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x1, 0xe0, 0x1e,
    0x1, 0xe0, 0x1e, 0x1, 0xe0, 0xf, 0x0, 0xf0,
    0xf, 0x0, 0xf0, 0xf, 0xff, 0xff, 0xff, 0xff,
    0xe0,

    /* U+00A3 "£" */
    0x7, 0xe0, 0x3f, 0xc1, 0xff, 0x8f, 0x9f, 0x3c,
    0x3c, 0xf0, 0xf3, 0xc0, 0xf, 0x0, 0x3c, 0x3,
    0xff, 0xf, 0xfc, 0x3f, 0xf0, 0x3c, 0x0, 0xf0,
    0x3, 0xc0, 0xf, 0x0, 0x3c, 0x3, 0xff, 0xff,
    0xff, 0xff, 0xff,

    /* U+00B0 "°" */
    0x38, 0xfb, 0x1e, 0x3c, 0x6f, 0x8e, 0x0
};


/*---------------------
 *  GLYPH DESCRIPTION
 *--------------------*/

static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc_r_s_28[] = {
    {.bitmap_index = 0, .adv_w = 0, .box_w = 0, .box_h = 0, .ofs_x = 0, .ofs_y = 0} /* id = 0 reserved */,
    {.bitmap_index = 0, .adv_w = 269, .box_w = 4, .box_h = 20, .ofs_x = 6, .ofs_y = 0},
    {.bitmap_index = 10, .adv_w = 269, .box_w = 16, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 50, .adv_w = 269, .box_w = 16, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 90, .adv_w = 269, .box_w = 5, .box_h = 9, .ofs_x = 5, .ofs_y = -6},
    {.bitmap_index = 96, .adv_w = 269, .box_w = 11, .box_h = 3, .ofs_x = 4, .ofs_y = 7},
    {.bitmap_index = 101, .adv_w = 269, .box_w = 5, .box_h = 4, .ofs_x = 6, .ofs_y = 0},
    {.bitmap_index = 104, .adv_w = 269, .box_w = 11, .box_h = 22, .ofs_x = 3, .ofs_y = -2},
    {.bitmap_index = 135, .adv_w = 269, .box_w = 13, .box_h = 20, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 168, .adv_w = 269, .box_w = 9, .box_h = 20, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 191, .adv_w = 269, .box_w = 14, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 226, .adv_w = 269, .box_w = 14, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 261, .adv_w = 269, .box_w = 14, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 296, .adv_w = 269, .box_w = 14, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 331, .adv_w = 269, .box_w = 14, .box_h = 20, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 366, .adv_w = 269, .box_w = 14, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 401, .adv_w = 269, .box_w = 13, .box_h = 20, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 434, .adv_w = 269, .box_w = 13, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 467, .adv_w = 269, .box_w = 15, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 505, .adv_w = 269, .box_w = 16, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 545, .adv_w = 269, .box_w = 15, .box_h = 20, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 583, .adv_w = 269, .box_w = 13, .box_h = 20, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 616, .adv_w = 269, .box_w = 14, .box_h = 20, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 651, .adv_w = 269, .box_w = 13, .box_h = 3, .ofs_x = 2, .ofs_y = -3},
    {.bitmap_index = 656, .adv_w = 269, .box_w = 14, .box_h = 15, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 683, .adv_w = 269, .box_w = 13, .box_h = 21, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 718, .adv_w = 269, .box_w = 13, .box_h = 15, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 743, .adv_w = 269, .box_w = 13, .box_h = 21, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 778, .adv_w = 269, .box_w = 14, .box_h = 15, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 805, .adv_w = 269, .box_w = 14, .box_h = 22, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 844, .adv_w = 269, .box_w = 13, .box_h = 21, .ofs_x = 2, .ofs_y = -6},
    {.bitmap_index = 879, .adv_w = 269, .box_w = 13, .box_h = 21, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 914, .adv_w = 269, .box_w = 12, .box_h = 21, .ofs_x = 3, .ofs_y = 0},
    {.bitmap_index = 946, .adv_w = 269, .box_w = 9, .box_h = 27, .ofs_x = 3, .ofs_y = -6},
    {.bitmap_index = 977, .adv_w = 269, .box_w = 15, .box_h = 21, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 1017, .adv_w = 269, .box_w = 12, .box_h = 21, .ofs_x = 3, .ofs_y = 0},
    {.bitmap_index = 1049, .adv_w = 269, .box_w = 15, .box_h = 15, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 1078, .adv_w = 269, .box_w = 13, .box_h = 15, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 1103, .adv_w = 269, .box_w = 14, .box_h = 15, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 1130, .adv_w = 269, .box_w = 13, .box_h = 21, .ofs_x = 2, .ofs_y = -6},
    {.bitmap_index = 1165, .adv_w = 269, .box_w = 13, .box_h = 21, .ofs_x = 2, .ofs_y = -6},
    {.bitmap_index = 1200, .adv_w = 269, .box_w = 12, .box_h = 15, .ofs_x = 4, .ofs_y = 0},
    {.bitmap_index = 1223, .adv_w = 269, .box_w = 14, .box_h = 15, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 1250, .adv_w = 269, .box_w = 14, .box_h = 19, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 1284, .adv_w = 269, .box_w = 13, .box_h = 15, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 1309, .adv_w = 269, .box_w = 15, .box_h = 15, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 1338, .adv_w = 269, .box_w = 16, .box_h = 15, .ofs_x = 0, .ofs_y = 0},
    {.bitmap_index = 1368, .adv_w = 269, .box_w = 15, .box_h = 15, .ofs_x = 1, .ofs_y = 0},
    {.bitmap_index = 1397, .adv_w = 269, .box_w = 16, .box_h = 21, .ofs_x = 1, .ofs_y = -6},
    {.bitmap_index = 1439, .adv_w = 269, .box_w = 13, .box_h = 15, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 1464, .adv_w = 269, .box_w = 14, .box_h = 20, .ofs_x = 2, .ofs_y = 0},
    {.bitmap_index = 1499, .adv_w = 269, .box_w = 7, .box_h = 7, .ofs_x = 5, .ofs_y = 13}
};

/*---------------------
 *  CHARACTER MAPPING
 *--------------------*/

static const uint16_t unicode_list_0_r_s_28[] = {
    0x0, 0x4, 0x5, 0xb, 0xc, 0xd, 0xe, 0xf,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x1f, 0x20, 0x22, 0x2c, 0x2f, 0x3e
};

static const uint16_t unicode_list_2[] = {
    0x0, 0xd
};

/*Collect the unicode lists and glyph_id offsets*/
static const lv_font_fmt_txt_cmap_t cmaps_r_s_28[] =
{
    {
        .range_start = 33, .range_length = 63, .glyph_id_start = 1,
        .unicode_list = unicode_list_0_r_s_28, .glyph_id_ofs_list = NULL, .list_length = 23, .type = LV_FONT_FMT_TXT_CMAP_SPARSE_TINY
    },
    {
        .range_start = 97, .range_length = 26, .glyph_id_start = 24,
        .unicode_list = NULL, .glyph_id_ofs_list = NULL, .list_length = 0, .type = LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY
    },
    {
        .range_start = 163, .range_length = 14, .glyph_id_start = 50,
        .unicode_list = unicode_list_2, .glyph_id_ofs_list = NULL, .list_length = 2, .type = LV_FONT_FMT_TXT_CMAP_SPARSE_TINY
    }
};



/*--------------------
 *  ALL CUSTOM DATA
 *--------------------*/

#if LVGL_VERSION_MAJOR == 8
/*Store all the custom data of the font*/
static  lv_font_fmt_txt_glyph_cache_t cache_r_s_28;
#endif

#if LVGL_VERSION_MAJOR >= 8
static const lv_font_fmt_txt_dsc_t font_dsc_r_s_28 = {
#else
static lv_font_fmt_txt_dsc_t font_dsc_r_s_28 = {
#endif
    .glyph_bitmap = glyph_bitmap_r_s_28,
    .glyph_dsc = glyph_dsc_r_s_28,
    .cmaps = cmaps_r_s_28,
    .kern_dsc = NULL,
    .kern_scale = 0,
    .cmap_num = 3,
    .bpp = 1,
    .kern_classes = 0,
    .bitmap_format = 0,
#if LVGL_VERSION_MAJOR == 8
    .cache = &cache_r_s_28
#endif
};



/*-----------------
 *  PUBLIC FONT
 *----------------*/

/*Initialize a public general font descriptor*/
#if LVGL_VERSION_MAJOR >= 8
const lv_font_t roboto_semibold_28 = {
#else
lv_font_t roboto_semibold_28 = {
#endif
    .get_glyph_dsc = lv_font_get_glyph_dsc_fmt_txt,    /*Function pointer to get glyph's data*/
    .get_glyph_bitmap = lv_font_get_bitmap_fmt_txt,    /*Function pointer to get glyph's bitmap*/
    .line_height = 28,          /*The maximum line height required by the font*/
    .base_line = 6,             /*Baseline measured from the bottom of the line*/
#if !(LVGL_VERSION_MAJOR == 6 && LVGL_VERSION_MINOR == 0)
    .subpx = LV_FONT_SUBPX_NONE,
#endif
#if LV_VERSION_CHECK(7, 4, 0) || LVGL_VERSION_MAJOR >= 8
    .underline_position = -2,
    .underline_thickness = 1,
#endif
    .dsc = &font_dsc_r_s_28,          /*The custom font data. Will be accessed by `get_glyph_bitmap/dsc` */
#if LV_VERSION_CHECK(8, 2, 0) || LVGL_VERSION_MAJOR >= 9
    .fallback = NULL,
#endif
    .user_data = NULL,
};



#endif /*#if ROBOTO_SEMIBOLD_28*/

